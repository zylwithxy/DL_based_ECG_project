from torch import nn
from torch.nn import functional as F
import torch
import numpy as np
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt

from fastdtw import fastdtw # dtw
from scipy.spatial.distance import euclidean
from numpy.fft import fft
import os
from sklearn.manifold import TSNE

from load_generator import LoadData
from acgan_dataloader import load_ECG_data

class CAL_KL_DIVE():
    def __init__(self, CLASSES, HIDDEN_DIM, L, PATH, SAMPLE_NUM, LABEL, model_name, origin_data):

        args = (CLASSES, HIDDEN_DIM, L, PATH, SAMPLE_NUM, LABEL, model_name)
        self.gen_data = self.load_model(*args) # Training data (SAMPLE_NUM, 12, 5500) Tensor
        self.origin_data = origin_data #  (SAMPLE_NUM, 12, 5500) Tensor
        self.path = f'/home/alien/XUEYu/Draft/KL_divergency/T_SNE/{model_name}_{SAMPLE_NUM}'

    def load_model(self, *args):
        gen_leads = LoadData(*args)
        return gen_leads.gen_results

    def cal_div_leads(self):

        results = [] # Record 12 leads kl divergency
        for lead_index in range(12):
            results.append(self.cal_div_lead(lead_index))
        
        return results
    
    def cal_div_lead(self, lead_index):
        """
        lead_index: lead index [0, 11]
        """
        kl_loss = nn.KLDivLoss(reduction="batchmean")
        origin_data = self.origin_data[:, lead_index, :].softmax(dim=-1)
        generate_data = self.gen_data[:, lead_index, :].softmax(dim=-1).log()
        output = kl_loss(generate_data, origin_data)

        return output.item()
    
    def cal_dwt_leads(self):

        results = [] # Record 12 leads dwt
        for lead_index in range(12):
            results.append(self.cal_dwt_lead(lead_index))
        
        return results
    
    def cal_dwt_lead(self, lead_index):
        """
        lead_index: lead index [0, 11]
        """
        dwt_result = 0
        origin_data = self.origin_data[:, lead_index, :].numpy() # (SAMPLE_NUM, 5500) ndarray
        generate_data = self.gen_data[:, lead_index, :].numpy() # (SAMPLE_NUM, 5500) ndarray

        for (origin_sample, generate_sample) in zip(origin_data, generate_data):
            distance, path = fastdtw(origin_sample, generate_sample, dist=euclidean)
            dwt_result += distance
        
        dwt_result = dwt_result / origin_data.shape[0]
        return dwt_result
    
    def cal_fft_leads(self):
        """Only for Label STE"""
        origin_freq_results, generate_freq_results = [], []
        for lead_index in range(12):
            temp1, temp2 = self.cal_fft_lead(lead_index)
            origin_freq_results.append(temp1)
            generate_freq_results.append(temp2)
        
        return origin_freq_results, generate_freq_results # (12, SAMPLE_NUM, 5500)
    
    def cal_fft_lead(self, lead_index):
        """
        lead_index: lead index [0, 11]
        """
        sr = 500 # sampling rate
        ts = 1.0 / sr # sampling interval
        origin_result, generate_result = [], []
        origin_data = self.origin_data[:, lead_index, :].numpy() # (SAMPLE_NUM, 5500) ndarray
        generate_data = self.gen_data[:, lead_index, :].numpy() # (SAMPLE_NUM, 5500) ndarray

        for (origin_sample, generate_sample) in zip(origin_data, generate_data):
            origin_freq = fft(origin_sample)
            generate_freq = fft(generate_sample)
            origin_result.append(origin_freq)
            generate_result.append(generate_freq)
        
        return (origin_result, generate_result) # (SAMPLE_NUM, 5500) List[ndarray]
    
    def cal_tsne_leads(self, generate_data_1):
        """
        Only for Label STE
        generate_data_1: (SAMPLE_NUM, 12, 5500) tensor. Generated by gen_1
        """
        for lead_index in range(12): # Just test 1 lead ; Normally 12 leads
            self.cal_tsne_lead(lead_index, generate_data_1[:, lead_index,:].numpy())
    
    def cal_tsne_lead(self, lead_index, generate_data_1):
        """
        lead_index: int [0, 11]
        generate_data_1: (SAMPLE_NUM, 5500) ndarray. Generated by gen_1
        """
        origin_data = self.origin_data[:, lead_index, :].numpy() # (SAMPLE_NUM, 5500) ndarray
        generate_data = self.gen_data[:, lead_index, :].numpy() # (SAMPLE_NUM, 5500) ndarray

        sample = origin_data.shape[0] # SAMPLE_NUM, int
        colors = ["tab:blue" for _ in np.arange(sample)] + \
                 ["tab:orange" for _ in np.arange(sample)] # Define the color of plots
        
        concat_samples = np.concatenate((origin_data, generate_data), axis= 0) # (2* SAMPLE_NUM, 5500) ndarray
        concat_samples_1 = np.concatenate((origin_data, generate_data_1), axis= 0) # (2* SAMPLE_NUM, 5500) ndarray
        
        tsne = TSNE(n_components = 2, perplexity = 40, n_iter = 300)
        tsne_results = tsne.fit_transform(concat_samples)
        tsne_results_1 = tsne.fit_transform(concat_samples_1)

        #-----------------Save fig-----------------#
        folder = f'LABEL9_SAMPLE_{sample}_2'
        folder_loc = os.path.join(self.path, folder)
        
        if not os.path.exists(folder_loc):
            os.makedirs(folder_loc)
        
        file_count = len(os.listdir(folder_loc))
        filename = f'Lead{lead_index+1}_{file_count+1}.png'
        
        #-----------------Plot fig-----------------#
        # fig, ax = plt.subplots(1, tight_layout= True)

        fig, axes = plt.subplots(1,2, sharex= True, sharey= True,tight_layout= True) # Compare 2 t-SNE

        for ax in axes:
            ax.scatter(tsne_results[:sample,0], tsne_results[:sample,1], 
                    c = colors[:sample], alpha = 0.2, label = "Original")
            ax.scatter(tsne_results[sample:,0], tsne_results[sample:,1], 
                    c = colors[sample:], alpha = 0.2, label = "Synthetic")
  
            ax.legend()
            ax.set_title(f't-SNE plot lead {lead_index+1}', fontsize= 15.5)
            ax.set_xlabel('x-tsne', fontsize= 13)
            
            ax.tick_params(labelsize=14.5)
            del tsne_results
            tsne_results= tsne_results_1

        axes[0].set_ylabel('y-tsne', fontsize= 13)

        fig.savefig(os.path.join(folder_loc, filename))
        plt.close(fig) # Saving successfully
      
    def __call__(self, method, generate_data_1= None):
        """
        method: "dwt" "kl_div" "fft" "tsne"
        generate_data_1: (SAMPLE_NUM, 12, 5500) tensor. Generated by gen_1
        """
        if method == "kl_div":
            results = self.cal_div_leads() # shape (12, )
        elif method == "dwt":
            results = self.cal_dwt_leads() # shape (12, )
        elif method == "fft":

            origin_freq_results, generate_freq_results = self.cal_fft_leads() # (12, SAMPLE_NUM, 5500)
            return origin_freq_results, generate_freq_results

        elif method == "tsne":
            self.cal_tsne_leads(generate_data_1)
            return 
            
        return results


def show_kl_div(matrix, row, column):
    """
    row: row label
    column: column label
    """
    temp = pd.DataFrame(matrix, index = row, columns = column)
    ax = sns.heatmap(temp, cmap= 'YlOrBr', annot=True, fmt=".4f")
    plt.show()


class FFT_SHOW():
    def __init__(self, *args, **kwargs) -> None:
        self.path = '/home/alien/XUEYu/Draft/KL_divergency/FFT'
        self.show_fft(*args, **kwargs)
        self.show_diff_freq(*args, **kwargs)

    def show_fft(self, mat_origin, mat_gen4, mat_gen1, lead, sample, **kwargs):
        """
        mat_origin: (12, SAMPLE_NUM, 5500) List[List[ndarray]]
        mat_gen4: (12, SAMPLE_NUM, 5500) List[List[ndarray]]
        mat_gen1: (12, SAMPLE_NUM, 5500) List[List[ndarray]]
        lead: [0, 11]
        sample: [0, 9] if the sample num is 10.
        """
        fig, axes = plt.subplots(3, 1, sharex=True, figsize=(30, 27+9), tight_layout= True)

        results = (mat_origin[lead][sample], \
                   mat_gen4[lead][sample], mat_gen1[lead][sample])

        titles = ['Original', 'Synthetized by generator with LSTM', \
              'Synthetized by generator without LSTM']
    
        sr = 500
        N = len(results[0]) # 5500
        n = np.arange(N)
        T = N/sr
        freq = n/T
        # ticks = np.arange(0., sr/2., 10/N)

        for i in np.arange(3):
            axes[i].stem(freq, np.abs(results[i]), 'b')
            axes[i].set_ylabel('FFT Amplitude |X(freq)|', **kwargs)
            axes[i].set_title(titles[i], **kwargs)
            axes[i].xaxis.set_ticks(freq[:int(N/2):60])
            axes[i].set_xlim(0, sr/4)
            axes[i].tick_params(labelsize=25.5)
        
        axes[2].set_xlabel('Freq (Hz)', **kwargs)

        #-----------------Save fig-----------------#
        folder = 'Overall'
        folder_loc = os.path.join(self.path, folder)
        
        if not os.path.exists(folder_loc):
            os.makedirs(folder_loc)
        
        file_count = len(os.listdir(folder_loc))
        filename = f'Lead{lead+1}_Label9_{file_count+1}.png'
        
        fig.savefig(os.path.join(folder_loc, filename))
        plt.close(fig) # Saving successfully
    
    def show_diff_freq(self, mat_origin, mat_gen4, mat_gen1, lead, sample, **kwargs):

        fig, axes = plt.subplots(1, 2, sharex= True,sharey=True, figsize=(60, 40), tight_layout= True)

        results = (mat_gen4[lead][sample], mat_gen1[lead][sample])
        sr = 500
        N = len(results[0]) # 5500
        n = np.arange(N)
        T = N/sr
        freq = n/T
        params = [dict(linefmt='b'), \
                    dict(linefmt='grey', markerfmt='D')]

        titles = ('Generator with LSTM', 'Generator without LSTM')

        fig.suptitle('Comparison between generators', y= 1.2, **kwargs)
        for i in range(2):
            axes[i].stem(freq, np.abs(results[i]), **params[i])
            axes[i].xaxis.set_ticks(freq[:int(N/2):60])
            axes[i].set_xlim(0, sr/4)
            axes[i].set_ylim(0, 160)
            axes[i].set_xlabel('Freq (Hz)', **kwargs)
            axes[i].set_title(titles[i], **kwargs)
            axes[i].tick_params(labelsize=25.5)
        
        axes[0].set_ylabel('FFT Amplitude |X(freq)|',**kwargs)

        #-----------------Save fig-----------------#
        folder = 'Comparison between generators'
        folder_loc = os.path.join(self.path, folder)
        
        if not os.path.exists(folder_loc):
            os.makedirs(folder_loc)
        
        file_count = len(os.listdir(folder_loc))
        filename = f'Lead{lead+1}_Label9_{file_count+1}.png' 
        fig.savefig(os.path.join(folder_loc, filename))
        plt.close(fig)


if __name__ == "__main__":

    CLASSES, HIDDEN_DIM, L = 9, 400, 5500
    SAMPLE_NUM = 100 # Number of samples generated

    PATHs = ['/home/alien/XUEYu/paper_code/Parameters/2018_Generator',\
             '/home/alien/XUEYu/paper_code/Parameters/2018_Generator/Generator',
             '/home/alien/XUEYu/paper_code/Parameters/2018_Generator/Generator_rmv_tanh']
            # LSTM ; Tanh ; without Tanh

    ROWs = ['Normal', 'AF', 'I-AVB', 'LBBB', 'RBBB', 'PAC', 'PVC', 'STD', 'STE']
    COLUMNs = [f'Lead{i+1}' for i in range(12)]

    # LABEL = 0
    results_gen4, results_gen1 = [], []

    label_indice = load_ECG_data() # shape (1350, 12, 5500)

    for LABEL in range(9):
        if LABEL == 8: # fft tsne
            origin_data = torch.FloatTensor(label_indice.dataset[LABEL * 150: LABEL * 150 + SAMPLE_NUM])
        
            cal_kl_gen4 = CAL_KL_DIVE(CLASSES, HIDDEN_DIM, L, PATHs[0], SAMPLE_NUM, LABEL, "gen_4", origin_data)
            
            cal_kl_gen1 = CAL_KL_DIVE(CLASSES, HIDDEN_DIM, L, PATHs[-1], SAMPLE_NUM, LABEL, "gen_1", origin_data)

            cal_kl_gen4("tsne", generate_data_1= cal_kl_gen1.gen_data)
            # cal_kl_gen1("tsne")
            # origin_freq_results_4, generate_freq_results_4 = cal_kl_gen4("fft") # (12, SAMPLE_NUM, 5500)
            # _, generate_freq_results_1 = cal_kl_gen1("fft") # (12, SAMPLE_NUM, 5500)

        # results_gen4.append(cal_kl_gen4("dwt")) 
        # results_gen1.append(cal_kl_gen1("dwt"))
        """
            
        origin_freq_results_4, generate_freq_results_4, generate_freq_results_1 = \
                                         np.array(origin_freq_results_4, dtype= np.float32), \
                                         np.array(generate_freq_results_4, dtype= np.float32),\
                                         np.array(generate_freq_results_1, dtype= np.float32) 
        """
    
    """
    
    results_gen4, results_gen1 = np.array(results_gen4, dtype= np.float32), \
                                 np.array(results_gen1, dtype= np.float32)
        
    show_kl_div(results_gen4, ROWs, COLUMNs)
    show_kl_div(results_gen1, ROWs, COLUMNs)

    """

    """
    kwargs = dict(fontsize=26, fontweight='bold')
    
    for lead in range(12):
        show_fft = FFT_SHOW(origin_freq_results_4, generate_freq_results_4, \
    generate_freq_results_1, lead, 4, **kwargs)
    """